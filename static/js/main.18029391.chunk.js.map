{"version":3,"sources":["updateCurrencyRates.js","actions/index.js","reducers/index.js","CurrencyItem.jsx","CurrencyList.jsx","ConverterForm.jsx","App.js","serviceWorker.js","index.js"],"names":["getRate","a","base","axios","get","data","rates","editInputValue","text","type","payload","selectTargetCurrency","currName","markFavorite","createAction","switchBaseCurrency","updateRatesRequest","updateRatesSuccess","updateRatesFailure","updateRates","baseCurr","dispatch","updateCurrencyRates","currencys","sortCurrencyByFavorite","curr1","curr2","isFavorite","handleActions","actions","state","action","newCurrencys","allCurrencys","Object","keys","mappedCurrencys","byCurrency","forEach","c","rate","localStorage","favorites","includes","sort","newCurrData","newByCurrency","sortedCurrs","baseCurrency","setItem","newFavorites","filter","split","defaultUI","inputValue","targetCurrency","combineReducers","UI","CurrencyItem","makeFavoriteHandler","props","makeBaseHandler","this","name","isBase","className","style","border","color","toFixed","onClick","disabled","React","Component","connect","CurrencyList","length","listOfCurrencys","map","currData","key","buildCurrList","CoverterForm","makeConverting","inputHandler","e","preventDefault","target","value","selectTargetCurr","onChange","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18029391.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getRate = async (base='USD') =>{\r\n    const {data}=await axios.get(`https://api.exchangeratesapi.io/latest?base=${base}`);\r\n    return data.rates;\r\n  };\r\n  \r\n  export default getRate;","import { createAction } from 'redux-actions';\r\nimport updateCurrencyRates from '../updateCurrencyRates';\r\n  \r\n  export const editInputValue=(text)=>({\r\n      type: 'INPUT_EDIT',\r\n      payload: {\r\n          text\r\n      }\r\n  });\r\n\r\n  export const selectTargetCurrency=(currName)=>({\r\n    type: 'TARGET_SELECT',\r\n    payload: {\r\n        currName\r\n    }\r\n  });\r\n\r\n  export const markFavorite=createAction('FAVORITE_MARK');\r\n  export const switchBaseCurrency=createAction('BASE_SWITCH');\r\n\r\n  export const updateRatesRequest = createAction('RATES_UPDATE_REQUEST');\r\n  export const updateRatesSuccess = createAction('RATES_UPDATE_SUCCESS');\r\n  export const updateRatesFailure = createAction('RATES_UPDATE_FAILURE');\r\n\r\n  export const updateRates=(baseCurr)=>async (dispatch)=>{\r\n    dispatch(updateRatesRequest());\r\n    try {\r\n        const currencys=await updateCurrencyRates(baseCurr);\r\n        dispatch (updateRatesSuccess(currencys));\r\n    } catch (e) {\r\n        dispatch (updateRatesFailure());\r\n    }\r\n  }\r\n  // END\r\n  ","import { combineReducers } from 'redux';\r\nimport { handleActions } from 'redux-actions';\r\nimport * as actions from '../actions';\r\n\r\nconst sortCurrencyByFavorite = (currencys) => (curr1, curr2) => {\r\n    if (currencys[curr1].isFavorite === currencys[curr2].isFavorite) return 0;\r\n    if (currencys[curr1].isFavorite) return -1;\r\n    if (currencys[curr2].isFavorite) return 1;\r\n};\r\n\r\n\r\nconst defaultCurrencys = {\r\n    byCurrency: {},\r\n    allCurrencys: []\r\n};\r\nconst currencys = handleActions({\r\n    [actions.updateRatesSuccess]: (state, action) => {\r\n        const newCurrencys = action.payload;\r\n        const allCurrencys = Object.keys(newCurrencys);\r\n        const mappedCurrencys = {\r\n            byCurrency: {},\r\n            allCurrencys\r\n        };\r\n        allCurrencys.forEach((c) => {\r\n            mappedCurrencys.byCurrency[c] = {\r\n                rate: newCurrencys[c],\r\n                isFavorite: (localStorage.favorites)?localStorage.favorites.includes(c):false\r\n            }\r\n        });\r\n       mappedCurrencys.allCurrencys.sort(sortCurrencyByFavorite(mappedCurrencys.byCurrency));\r\n        return mappedCurrencys;\r\n    },\r\n    [actions.markFavorite]: (state, action) => {\r\n        const { currName } = action.payload;\r\n        const newCurrData = state.byCurrency[currName];\r\n        newCurrData.isFavorite = !newCurrData.isFavorite;\r\n        const newByCurrency = { ...state.byCurrency, [currName]: newCurrData };\r\n\r\n        const sortedCurrs = state.allCurrencys.sort(sortCurrencyByFavorite(newByCurrency));\r\n        return {\r\n            ...state,\r\n            allCurrencys: sortedCurrs,\r\n            byCurrency: newByCurrency\r\n        };\r\n    }\r\n\r\n}, defaultCurrencys);\r\n\r\nconst baseCurrency = handleActions({\r\n    [actions.switchBaseCurrency]: (state, action) => {\r\n        localStorage.setItem('baseCurrency',action.payload.baseCurrency);\r\n        return action.payload.baseCurrency;\r\n    }\r\n}, (localStorage.baseCurrency)?localStorage.baseCurrency:'USD');\r\n\r\nconst favorites=handleActions({\r\n    [actions.markFavorite]:(state, action)=>{\r\n        const {currName}=action.payload;\r\n        let newFavorites=[];\r\n        if (state.includes(currName)) {\r\n            newFavorites=state.filter((c)=>c!==currName);            \r\n        } else {\r\n            newFavorites=[...state, action.payload.currName];\r\n        };\r\n        localStorage.setItem('favorites', newFavorites);\r\n        return newFavorites;\r\n    }\r\n},(localStorage.favorites)?localStorage.favorites.split(','):[]);\r\n\r\nconst defaultUI = {\r\n    inputValue: '',\r\n    targetCurrency: (localStorage.targetCurrency)?localStorage.targetCurrency:'USD'\r\n}\r\nconst UI = (state = defaultUI, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_EDIT': {            \r\n            return { ...state, inputValue: action.payload.text };\r\n        }\r\n        case 'TARGET_SELECT': {\r\n            localStorage.setItem('targetCurrency', action.payload.currName);\r\n            return { ...state, targetCurrency: action.payload.currName };\r\n        }\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default combineReducers({\r\n    currencys,\r\n    baseCurrency,\r\n    UI,\r\n    favorites\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { markFavorite, switchBaseCurrency, updateRates } from './actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    const props = {\r\n        baseCurrency: state.baseCurrency\r\n    };\r\n    return props;\r\n};\r\n\r\nclass CurrencyItem extends React.Component {\r\n    makeFavoriteHandler = (currName) => () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(markFavorite({ currName }));\r\n    };\r\n\r\n    makeBaseHandler = (currName) => () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(switchBaseCurrency({ baseCurrency: currName }));\r\n        dispatch(updateRates(currName));\r\n    };\r\n\r\n    render() {\r\n        const { name, rate, isFavorite, baseCurrency } = this.props;\r\n        const isBase = baseCurrency === name;\r\n        return (\r\n            <div className='card-body' style={isFavorite ? { border: 'solid black' } : null}>\r\n                <p className='h3' style={isBase?{color:'red'}:null}>\r\n                    {name}\r\n                </p>\r\n                <p className=''>{rate.toFixed(2)} {baseCurrency}</p>\r\n                <p className='card-footer'>\r\n                    <button className='btn-primary' onClick={this.makeFavoriteHandler(name)}>favorite</button>\r\n                    <button className='btn-success' onClick={this.makeBaseHandler(name)} disabled={isBase}>base</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(CurrencyItem);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CurrencyItem from './CurrencyItem';\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    const props = {\r\n        currencys: state.currencys,\r\n        baseCurrency: state.baseCurrency\r\n    };\r\n    return props;\r\n};\r\n\r\nclass CurrencyList extends React.Component {\r\n\r\n    buildCurrList() {\r\n        //const style={border: 'solid 1px', margin: `5px`}\r\n        const { currencys } = this.props;\r\n        const allCurrencys = currencys.allCurrencys;\r\n        if (allCurrencys.length === 0) return null;\r\n\r\n        const listOfCurrencys = allCurrencys.map((c) => [c, currencys.byCurrency[c]])\r\n        return (\r\n            <ul className='row row-cols-2 row-cols-sm-3 row-cols-md-5 row-cols-lg-6'>\r\n                {listOfCurrencys.map(([name, currData]) => (\r\n                    <div className='card bg-dark col'   key={name}>\r\n                        <CurrencyItem name={name} rate={currData.rate} isFavorite={currData.isFavorite} />\r\n                    </div>))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.buildCurrList()}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(CurrencyList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editInputValue, selectTargetCurrency } from './actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    const props = {\r\n        baseCurrency: state.baseCurrency,\r\n        currencys: state.currencys,\r\n\r\n        inputValue: state.UI.inputValue,\r\n        targetCurrency: state.UI.targetCurrency\r\n    };\r\n\r\n    return props;\r\n};\r\n\r\nclass CoverterForm extends React.Component {\r\n    makeConverting = () => {\r\n        const { inputValue, targetCurrency, currencys } = this.props;\r\n        if (inputValue === '' || targetCurrency === '') return 0;\r\n        return (inputValue * currencys.byCurrency[targetCurrency].rate).toFixed(2);\r\n    };\r\n\r\n    inputHandler = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch } = this.props;\r\n        dispatch(editInputValue(e.target.value));\r\n    };\r\n\r\n    selectTargetCurr = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch } = this.props;\r\n        dispatch(selectTargetCurrency(e.target.value));\r\n    };\r\n\r\n    buildCurrList = () => {\r\n        const { allCurrencys } = this.props.currencys;\r\n        const { targetCurrency } = this.props;\r\n        if (allCurrencys.length === 0) return <select>No data</select>;\r\n        return (\r\n            <select onChange={this.selectTargetCurr} value={targetCurrency}>\r\n                {allCurrencys.map((c) => <option key={c}>{c}</option>)}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { baseCurrency } = this.props;\r\n        const { inputValue } = this.props;\r\n        return (\r\n            <form>\r\n                <p>Конвертер валют</p>\r\n                <p>\r\n                    <input onChange={this.inputHandler} value={inputValue}></input>\r\n                    {this.buildCurrList()}\r\n                    <span> = {this.makeConverting()} {baseCurrency}</span>\r\n                </p>\r\n\r\n            </form>\r\n        )\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CoverterForm);","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport CurrencyList from './CurrencyList';\nimport CoverterForm from './ConverterForm';\nimport { updateRates, switchBaseCurrency } from './actions/index';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    baseCurrency: state.baseCurrency\n  };\n  return props;\n};\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { dispatch, baseCurrency } = this.props;\n    dispatch(updateRates(baseCurrency));\n    dispatch(switchBaseCurrency({baseCurrency}));\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header container\">\n          <CoverterForm />\n          <CurrencyList />\n        </header>\n      </div>\n    );\n  }\n\n\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n\nimport reducers from './reducers/index.js';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { applyMiddleware, createStore } from 'redux';\n\nconst store=createStore (reducers, applyMiddleware(thunk));\n\n\n\nReactDOM.render((<Provider store={store}>\n  <App />\n</Provider>),document.getElementById('root'));\n\n\n\n/*ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}